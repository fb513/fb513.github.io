<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>但行好事，莫问前程</title>
  
  <subtitle>CV工程师，了解面向Google编程的基本原理，有三年使用Google经验，在通往程序员的道路上艰难的爬行着。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-11-12T01:57:04.166Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fengbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL原理</title>
    <link href="http://yoursite.com/2123/08/30/%E5%9F%BA%E7%A1%80%E4%B9%8BMySQL%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2123/08/30/基础之MySQL原理/</id>
    <published>2123-08-30T11:53:07.000Z</published>
    <updated>2023-11-12T01:57:04.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL总结"><a href="#MySQL总结" class="headerlink" title="MySQL总结"></a><a href="https://k09fnt46xc.feishu.cn/mindnotes/DsD0b9D2ymOvuRnWMFaccz0Mnoh?from=from_copylink" target="_blank" rel="noopener">MySQL总结</a></h3><h3 id="MySQL-姜承尧视频课总结-视频地址"><a href="#MySQL-姜承尧视频课总结-视频地址" class="headerlink" title="MySQL-姜承尧视频课总结 | 视频地址"></a><a href="https://k09fnt46xc.feishu.cn/docx/doxcn1scyTvUP8eJyonRrqyeu9c?from=from_copylink" target="_blank" rel="noopener">MySQL-姜承尧视频课总结</a> | <a href="https://www.bilibili.com/video/BV1nK411r7Vz/?spm_id_from=333.337.search-card.all.click&amp;vd_source=90b7ed956776b0dd8633d9fbaa6ff30d" target="_blank" rel="noopener">视频地址</a></h3><h3 id="MySQL实战45讲总结-MySQL实战45讲精选评论-课程地址"><a href="#MySQL实战45讲总结-MySQL实战45讲精选评论-课程地址" class="headerlink" title="MySQL实战45讲总结 | MySQL实战45讲精选评论 | 课程地址"></a><a href="https://k09fnt46xc.feishu.cn/docx/JKL8dMZIaoR47MxcJDCcHHcTnhb?from=from_copylink" target="_blank" rel="noopener">MySQL实战45讲总结</a> | <a href="https://k09fnt46xc.feishu.cn/docx/X3MOdiLHvo4dyuxTMwocKPAeneb?from=from_copylink" target="_blank" rel="noopener">MySQL实战45讲精选评论</a> | <a href="https://time.geekbang.org/column/article/68319" target="_blank" rel="noopener">课程地址</a></h3><h2 id="其他优秀的MySQL学习资料"><a href="#其他优秀的MySQL学习资料" class="headerlink" title="其他优秀的MySQL学习资料"></a>其他优秀的MySQL学习资料</h2><h3 id="MySQL是怎样运行的"><a href="#MySQL是怎样运行的" class="headerlink" title="MySQL是怎样运行的"></a><a href="https://juejin.cn/book/6844733769996304392?enter_from=course_center&amp;utm_source=course_center" target="_blank" rel="noopener">MySQL是怎样运行的</a></h3><p>非常值得推荐，实体书更棒，作者大大是一个非常有情怀的理想主义者。</p><h3 id="姜老师的MySQL技术内幕"><a href="#姜老师的MySQL技术内幕" class="headerlink" title="姜老师的MySQL技术内幕"></a><a href="https://book.douban.com/subject/24708143/" target="_blank" rel="noopener">姜老师的MySQL技术内幕</a></h3><p>配合上面的视频看效果更佳。</p><h2 id="网络上一些有意思的线上问题"><a href="#网络上一些有意思的线上问题" class="headerlink" title="网络上一些有意思的线上问题"></a>网络上一些有意思的线上问题</h2><h3 id="稀疏文件和磁盘报警-范围查询导致的死锁-一个最不可思议的MySQL死锁分析-主键和唯一索引导致的死锁"><a href="#稀疏文件和磁盘报警-范围查询导致的死锁-一个最不可思议的MySQL死锁分析-主键和唯一索引导致的死锁" class="headerlink" title="稀疏文件和磁盘报警 | 范围查询导致的死锁 | 一个最不可思议的MySQL死锁分析 | 主键和唯一索引导致的死锁"></a><a href="https://www.cnblogs.com/lemon-le/p/11551367.html" target="_blank" rel="noopener">稀疏文件和磁盘报警</a> | <a href="https://k09fnt46xc.feishu.cn/docx/RzLydns3Vo4hWGxBf3CcZpJwn4c?from=from_copylink" target="_blank" rel="noopener">范围查询导致的死锁</a> | <a href="https://k09fnt46xc.feishu.cn/docx/UDwddZy4PoTbpfxUUkLcmvz7nCh?from=from_copylink" target="_blank" rel="noopener">一个最不可思议的MySQL死锁分析</a> | <a href="https://k09fnt46xc.feishu.cn/docx/Y9BAdTJploFcj7x5DZkcV5hnn6a?from=from_copylink" target="_blank" rel="noopener">主键和唯一索引导致的死锁</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySQL总结&quot;&gt;&lt;a href=&quot;#MySQL总结&quot; class=&quot;headerlink&quot; title=&quot;MySQL总结&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/mindnotes/DsD0b9D2ymOvuRnWM
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MySQL线程池</title>
    <link href="http://yoursite.com/2023/12/17/%E5%85%B6%E5%AE%83%E4%B9%8BMySQL%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2023/12/17/其它之MySQL线程池/</id>
    <published>2023-12-17T07:33:52.000Z</published>
    <updated>2023-12-16T01:07:32.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/AsDpddWfjojsxexY7j3ctoRwnvg?from=from_copylink" target="_blank" rel="noopener">MySQL线程池</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/AsDpddWfjojsxexY7j3ctoRwnvg?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL线程池&lt;/a&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB性能优化基础</title>
    <link href="http://yoursite.com/2023/12/16/%E5%85%B6%E5%AE%83%E4%B9%8BInnoDB%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2023/12/16/其它之InnoDB性能优化基础/</id>
    <published>2023-12-16T07:33:52.000Z</published>
    <updated>2023-12-16T01:05:37.689Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/RIb1d1ibuoCWdNxM5QNcsGYSnQd?from=from_copylink" target="_blank" rel="noopener">InnoDB性能优化基础</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/RIb1d1ibuoCWdNxM5QNcsGYSnQd?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;InnoDB性能优化基础&lt;/a
      
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>Java8之后的版本新特性</title>
    <link href="http://yoursite.com/2023/12/03/%E5%85%B6%E5%AE%83%E4%B9%8BJava8%E4%B9%8B%E5%90%8E%E7%9A%84%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2023/12/03/其它之Java8之后的版本新特性/</id>
    <published>2023-12-03T07:33:52.000Z</published>
    <updated>2023-12-02T12:32:59.380Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/MJjkdqz61oChErxi1e0cuWtInrc?from=from_copylink" target="_blank" rel="noopener">Java8之后的版本新特性</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/MJjkdqz61oChErxi1e0cuWtInrc?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java8之后的版本新特性&lt;/
      
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>MySQL8.0新特性</title>
    <link href="http://yoursite.com/2023/12/02/%E5%85%B6%E5%AE%83%E4%B9%8BMySQL8.0%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2023/12/02/其它之MySQL8.0新特性/</id>
    <published>2023-12-02T07:33:52.000Z</published>
    <updated>2023-12-02T12:06:57.776Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/Q3ZUdKy6ToQJgYxspplcDAoYnRc?from=from_copylink" target="_blank" rel="noopener">MySQL8.0新特性</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/Q3ZUdKy6ToQJgYxspplcDAoYnRc?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL8.0新特性&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ之Quorum队列的使用</title>
    <link href="http://yoursite.com/2023/11/24/%E5%85%B6%E5%AE%83%E4%B9%8BRabbitMQ%E4%B9%8BQuorum%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2023/11/24/其它之RabbitMQ之Quorum队列的使用/</id>
    <published>2023-11-24T07:33:52.000Z</published>
    <updated>2023-12-02T12:14:22.019Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/UpaudOcYIoYJiQxheJcc7VHHnSg?from=from_copylink" target="_blank" rel="noopener">RabbitMQ基于Raft算法实现的Quorum队列的使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/UpaudOcYIoYJiQxheJcc7VHHnSg?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RabbitMQ基于Raft算
      
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>音视频基础概念</title>
    <link href="http://yoursite.com/2023/11/19/WebRTC%E4%B9%8B%E9%9F%B3%E8%A7%86%E9%A2%91%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2023/11/19/WebRTC之音视频基础概念/</id>
    <published>2023-11-19T07:33:52.000Z</published>
    <updated>2023-11-19T12:07:59.543Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/C79zdd7hrotX18xFUkEcT7XHnNd?from=from_copylink" target="_blank" rel="noopener">音视频基础概念</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/C79zdd7hrotX18xFUkEcT7XHnNd?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;音视频基础概念&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="WebRTC" scheme="http://yoursite.com/tags/WebRTC/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL基础使用</title>
    <link href="http://yoursite.com/2023/11/01/%E5%85%B6%E5%AE%83%E4%B9%8BPostgreSQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2023/11/01/其它之PostgreSQL基础/</id>
    <published>2023-11-01T07:33:52.000Z</published>
    <updated>2023-11-12T01:57:15.475Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/KThfdGyy6o9c9nx9kiicFZ0DnYc?from=from_copylink" target="_blank" rel="noopener">PostgreSQL基础使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/KThfdGyy6o9c9nx9kiicFZ0DnYc?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PostgreSQL基础使用&lt;
      
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>Coturn安装</title>
    <link href="http://yoursite.com/2023/10/31/WebRTC%E4%B9%8BCoturn%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2023/10/31/WebRTC之Coturn安装/</id>
    <published>2023-10-31T07:33:52.000Z</published>
    <updated>2023-11-12T02:10:16.290Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/CNesdLV1QoK455xOKTkcvWRKnEg?from=from_copylink" target="_blank" rel="noopener">Coturn安装</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/CNesdLV1QoK455xOKTkcvWRKnEg?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coturn安装&lt;/a&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="WebRTC" scheme="http://yoursite.com/tags/WebRTC/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC简介</title>
    <link href="http://yoursite.com/2023/10/30/WebRTC%E4%B9%8B%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2023/10/30/WebRTC之简介/</id>
    <published>2023-10-30T07:33:52.000Z</published>
    <updated>2023-11-12T02:00:51.988Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://k09fnt46xc.feishu.cn/docx/NALadISosohxMkxXMfEcDlT6nwh?from=from_copylink" target="_blank" rel="noopener">WebRTC简介</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://k09fnt46xc.feishu.cn/docx/NALadISosohxMkxXMfEcDlT6nwh?from=from_copylink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebRTC简介&lt;/a&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="WebRTC" scheme="http://yoursite.com/tags/WebRTC/"/>
    
  </entry>
  
  <entry>
    <title>加密算法基础</title>
    <link href="http://yoursite.com/2020/11/14/%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/11/14/基础之加密算法/</id>
    <published>2020-11-14T11:38:05.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础加密技术"><a href="#基础加密技术" class="headerlink" title="基础加密技术"></a>基础加密技术</h3><ul><li>对称密码(AES)：加密和解密使用同一把密匙的加密算法。<ul><li>ECB模式：直接切割明文然后加密成密文，简单、快速、不安全。</li><li>CBC模式：TLS/SSL使用该模式，推荐使用。</li><li>CFB模式、OFB模式和CTR模式都是安全的模式，不太能分清优缺点。</li></ul></li><li>公钥密码(RSA)：使用公匙加密，私匙解密的加密算法。<a id="more"></a></li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ul><li>单向散列函数：通过计算数据的Hash值来保证文件或数据的完整性。具体算法包括MD5和SHA-3等。</li><li>消息认证码(HMAC)：一种与密匙相关联的单向散列函数。不仅可以保证数据的完整性，确认消息是否被篡改。而且可以确认消息是否来自所期待的对象。<ul><li>消息认证码的输入包括任意长度的消息和一个发送者和接收者之间共享的密钥，输出为固定长度的数据，这个数据称为MAC值。</li><li>要计算MAC必须持有密钥，没有密钥就无法计算MAC，该特性保证了消息来自期待的对象。</li></ul></li><li>数字签名：不但可以保证数据的完整性和确认消息是否来自期待的对象。而且可以保证消息的不可否认性。<ul><li>消息认证码无法防止否认是因为消息的发送者和接收者共享同一个密钥。两者都可以用该密钥构建出MAC。</li><li>而数字签名是使用签名密钥来生成签名，使用验证密钥来验证签名是否期待的对象签发，验证密钥无法生成签名。和非对称加密类似。但是是使用私钥加密、公钥解密。</li></ul></li><li>公钥证书：对公钥添加数字签名后就得到了公钥证书。<ul><li>CA是证书的签发机构，是负责签发证书、认证证书、管理已颁发证书的机关。如果一个用户想鉴别另一个证书的真伪，可以用CA的公钥对那个证书上的签字进行验证，一旦验证通过，该证书就被认为是有效的。</li></ul></li></ul><h3 id="数字签名实现"><a href="#数字签名实现" class="headerlink" title="数字签名实现"></a>数字签名实现</h3><ol><li>通常是先对数据进行一次Hash摘要(SHA1/SHA256/SHA512等)，然后再使用非对称加密算法(RSA/ECC等)对这个摘要进行加密，这样得到的结果就是原始数据的一个签名。</li><li>用户在验证数据时，只需要使用公钥解密出Hash摘要，然后自己再对数据进行一次同样的摘要，对比两个摘要是否相同即可。</li></ol><h3 id="SSH-RSA工作原理"><a href="#SSH-RSA工作原理" class="headerlink" title="SSH-RSA工作原理"></a>SSH-RSA工作原理</h3><ol><li>生成一对密钥，一把专用密钥和一把公用密钥。公用密钥用于对消息进行加密，只有拥有专用密钥的人才能对该消息进行解密。</li><li>把公用密钥拷贝到远程服务器的文件(~/.ssh/authorized_keys)里。</li><li>本地输入ssh drobbins@remotebox登录到远程。</li><li>服务端的sshd会生成一个伪随机数，并用我们先前拷贝过去的公用密钥对这个随机数进行加密。然后，sshd把加密了的随机数发回给客户端的ssh。</li><li>客户端对这个随机数进行解密后，再把它发回给服务端。</li><li>服务端允许客户端登录。</li></ol><h3 id="OpenVPN消息发送流程"><a href="#OpenVPN消息发送流程" class="headerlink" title="OpenVPN消息发送流程"></a>OpenVPN消息发送流程</h3><ol><li>客户端将自己的公钥发送给服务端。</li><li>服务端通过CA证书验证公钥是自己签发的，并将密匙通过客户端公钥加密后发送给客户端。</li><li>客户端使用私钥解密获取对称加密的密钥。</li><li>客户端通过对称加密的密匙加密消息并发送给服务端，服务端通过该密钥解密。</li><li>服务端发送消息给客户端同理。</li></ol><h3 id="JWT实现方式"><a href="#JWT实现方式" class="headerlink" title="JWT实现方式"></a><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JWT实现方式</a></h3><ol><li>HS256(HMAC-SHA256)：使用同一个secret_key进行签名与验证(对称加密)。一旦secret_key泄漏，就毫无安全性可言了。因此HS256只适合集中式认证，签名和验证都必须由可信方进行。</li><li>RS256(RSA-SHA256)：使用RSA私钥进行签名，使用RSA公钥进行验证。公钥即使泄漏也毫无影响，只要确保私钥安全就行。RS256可以将公钥给第三方应用，让第三方应用也可以验证登录信息(微信登录原理)。</li><li>ES256(ECDSA-SHA256)： 和RS256一样，都使用私钥签名，公钥验证。算法速度上差距也不大，但是它的签名长度相对短很多(省流量)，并且算法强度和RS256差不多。</li></ol><h3 id="SSL-TLS协议运行机制的概述"><a href="#SSL-TLS协议运行机制的概述" class="headerlink" title="SSL/TLS协议运行机制的概述"></a><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">SSL/TLS协议运行机制的概述</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础加密技术&quot;&gt;&lt;a href=&quot;#基础加密技术&quot; class=&quot;headerlink&quot; title=&quot;基础加密技术&quot;&gt;&lt;/a&gt;基础加密技术&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对称密码(AES)：加密和解密使用同一把密匙的加密算法。&lt;ul&gt;
&lt;li&gt;ECB模式：直接切割明文然后加密成密文，简单、快速、不安全。&lt;/li&gt;
&lt;li&gt;CBC模式：TLS/SSL使用该模式，推荐使用。&lt;/li&gt;
&lt;li&gt;CFB模式、OFB模式和CTR模式都是安全的模式，不太能分清优缺点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公钥密码(RSA)：使用公匙加密，私匙解密的加密算法。
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件操作</title>
    <link href="http://yoursite.com/2020/10/18/%E5%9F%BA%E7%A1%80%E4%B9%8BLinux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/10/18/基础之Linux文件操作/</id>
    <published>2020-10-18T02:13:20.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用I-O"><a href="#通用I-O" class="headerlink" title="通用I/O"></a>通用I/O</h2><h3 id="基础的系统调用"><a href="#基础的系统调用" class="headerlink" title="基础的系统调用"></a>基础的系统调用</h3><ul><li>open()和close(): 打开和关闭文件。</li><li>write()和read(): 读写打开的文件。</li><li>lseek(): 设置打开的文件的偏移量。</li><li>ioctl(): 对IO设备的非通用属性进行操作。</li><li>fcntl(): 获取和设置打开文件的熟悉，O_NONBLOCK等。</li><li>dup()和dup2(): 复制文件描述符，2&gt;&amp;1==dup2(1, 2)。</li><li>pwrite()和pread(): 在给定的偏移量上进行读写操作。</li><li>truncate()和ftruncate(): 将文件设置未指定的大小。如果文件大于指定的size，大于的部分丢失。小于则形成文件空洞。<a id="more"></a></li></ul><h3 id="数据同步的系统调用"><a href="#数据同步的系统调用" class="headerlink" title="数据同步的系统调用"></a>数据同步的系统调用</h3><ul><li>fsync()和fdatasync(): 强制刷新缓存数据到文件中。fdatasync只会刷新对read()有影响的元数据，如文件大小；fsync()会刷新所有的元数据，即使对数据读取没有影响，如文件的修改时间。</li><li>sync(void): 强制内核缓冲区中包含的所有更新过的文件信息都刷新到磁盘中。一个永久的内核线程会每隔30秒刷新一次缓存到磁盘。</li><li>打开文件时添加O_SYNC标记: 让写操作自动的刷新文件数据和元数据(fsync)到磁盘中。O_DSYNC标记则类比(fdatasync)。<br>IO数据同步</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通用I-O&quot;&gt;&lt;a href=&quot;#通用I-O&quot; class=&quot;headerlink&quot; title=&quot;通用I/O&quot;&gt;&lt;/a&gt;通用I/O&lt;/h2&gt;&lt;h3 id=&quot;基础的系统调用&quot;&gt;&lt;a href=&quot;#基础的系统调用&quot; class=&quot;headerlink&quot; title=&quot;基础的系统调用&quot;&gt;&lt;/a&gt;基础的系统调用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;open()和close(): 打开和关闭文件。&lt;/li&gt;
&lt;li&gt;write()和read(): 读写打开的文件。&lt;/li&gt;
&lt;li&gt;lseek(): 设置打开的文件的偏移量。&lt;/li&gt;
&lt;li&gt;ioctl(): 对IO设备的非通用属性进行操作。&lt;/li&gt;
&lt;li&gt;fcntl(): 获取和设置打开文件的熟悉，O_NONBLOCK等。&lt;/li&gt;
&lt;li&gt;dup()和dup2(): 复制文件描述符，2&amp;gt;&amp;amp;1==dup2(1, 2)。&lt;/li&gt;
&lt;li&gt;pwrite()和pread(): 在给定的偏移量上进行读写操作。&lt;/li&gt;
&lt;li&gt;truncate()和ftruncate(): 将文件设置未指定的大小。如果文件大于指定的size，大于的部分丢失。小于则形成文件空洞。
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="http://yoursite.com/2020/08/13/Python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/08/13/Python基础/</id>
    <published>2020-08-13T14:24:35.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python数据模型"><a href="#Python数据模型" class="headerlink" title="Python数据模型"></a>Python数据模型</h3><ol><li>Python的特殊方法，如<strong>len</strong>等。Python类实现这些方法，那么在调用len等函数的时候，Python解释器会自动调用这些方法。</li><li>collections.namedtuple用来构建一个带字段名的元组和一个有名字的类，即构建只有少数属性但是没有方法的对象，比如数据库条目。<a id="more"></a></li></ol><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>列表推导和生成器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">symbols = <span class="string">"abcdef"</span></span><br><span class="line">codes = [ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols]</span><br><span class="line"><span class="comment"># == list(filter(lambda c: c &gt; 127, map(ord, symbols)))</span></span><br><span class="line">beyand = [ord(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols <span class="keyword">if</span> ord(symbol) &gt; <span class="number">100</span>]</span><br><span class="line">colors = [<span class="string">'black'</span>, <span class="string">'white'</span>]</span><br><span class="line">sizes = [<span class="string">'S'</span>, <span class="string">'M'</span>, <span class="string">'L'</span>]</span><br><span class="line">tshirts = [(color, size) <span class="keyword">for</span> size <span class="keyword">in</span> sizes <span class="keyword">for</span> color <span class="keyword">in</span> colors]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Python数据模型&quot;&gt;&lt;a href=&quot;#Python数据模型&quot; class=&quot;headerlink&quot; title=&quot;Python数据模型&quot;&gt;&lt;/a&gt;Python数据模型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Python的特殊方法，如&lt;strong&gt;len&lt;/strong&gt;等。Python类实现这些方法，那么在调用len等函数的时候，Python解释器会自动调用这些方法。&lt;/li&gt;
&lt;li&gt;collections.namedtuple用来构建一个带字段名的元组和一个有名字的类，即构建只有少数属性但是没有方法的对象，比如数据库条目。
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础</title>
    <link href="http://yoursite.com/2020/07/11/%E5%85%B6%E5%AE%83%E4%B9%8BDocker%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/07/11/其它之Docker基础/</id>
    <published>2020-07-11T07:33:52.000Z</published>
    <updated>2023-12-03T12:36:04.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul><li>docker info: 查看Docker服务是否正常。</li><li>docker images: 查看所有镜像。</li><li>docker ps -a: 查看当前系统中存在的容器。-a表示无论是否在运行中，都会被查找到。</li><li>docker start/stop name: 启动或停止容器。</li><li>docker rm name: 删除容器。运行中的容器是无法直接删除的，需要先停止容器运行后才能将其删除。</li><li>docker rmi name: 删除Image。</li><li>docker logs -f -t name: 查看容器日志。-f表示用于监控容器的日志，功能类似于tail -f。-t用来添加时间戳。</li><li>docker exec -it name /bin/bash: 在容器内运行进程。</li><li>docker build -t weather:v1.0 ./: 构建一个镜像。</li><li>docker run -d -p 80:8080 –name weather weather:v1.0: 运行镜像。</li><li>docker tag weather:v1.0 fengbo4213/test:v1.0: 给镜像打标签。</li><li>docker push fengbo4213/test:v1.0: 推送到DockerHub。</li><li>docker cp weather:/app ./: 将未启动容器中的内容拷贝出来，方便查看。</li><li>docker inspect name: 查看容器详细信息。<a id="more"></a></li></ul><h3 id="Docker安装phpmyadmin"><a href="#Docker安装phpmyadmin" class="headerlink" title="Docker安装phpmyadmin"></a>Docker安装phpmyadmin</h3><ol><li>下载phpmyadmin镜像: docker pull phpmyadmin/phpmyadmin</li><li>使用该镜像启动容器: docker run -d –name myadmin -e PMA_HOST=192.168.206.132 -e PMA_PORT=3307 -p 8283:80 phpmyadmin/phpmyadmin</li></ol><h3 id="Docker安装Jupyter-Lab"><a href="#Docker安装Jupyter-Lab" class="headerlink" title="Docker安装Jupyter-Lab"></a>Docker安装Jupyter-Lab</h3><ol><li>docker pull jupyter/all-spark-notebook</li><li>docker run -p 8888:8888 -p 4040:4040 –name jupyter -e JUPYTER_ENABLE_LAB=yes -v /usr/local/jupyter:/home/jovyan/work/ jupyter/all-spark-notebook</li></ol><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><p>–net=bridge<br>当 Docker 进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的 Docker 容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。从 docker0 子网中分配一个IP给容器使用，并设置docker0的 IP 地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker 将 veth pair 设备的一端放在新创建的容器 中，并命名为 eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。可以通过brctl show命令查看：<br>–net=host<br>–net=container<br>–net=none</p><h3 id="数据共享和持久化"><a href="#数据共享和持久化" class="headerlink" title="数据共享和持久化"></a>数据共享和持久化</h3><p>数据卷<br>挂载主机目录</p><p>·volume 会引起 docker 目录膨胀，因为既要存镜像，又要存 volume，最好不要放在系统盘，将docker 的安装目录配置到其他更大的挂载盘</p><p>·两者有一个不同的行为：当容器外的对应目录是空的，volume 会先将容器内的内容拷贝到容器外目录，而 mount 会将外部的目录覆盖容器内部目录</p><p>·volume 还有一个不如 bind mount 的地方，不能 直接挂载文件，例如挂载 nginx 容器的配置文件：nginx.conf</p><h3 id="制作镜像-Dockerfile"><a href="#制作镜像-Dockerfile" class="headerlink" title="制作镜像 - Dockerfile"></a>制作镜像 - Dockerfile</h3><p>ReplicaSet控制Pod的数量<br>Deployment在ReplicaSet的基础上提供滚动更新<br>StatefulSet针对与有状态应用<br>HPA监控负载实现自动扩容</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;docker info: 查看Docker服务是否正常。&lt;/li&gt;
&lt;li&gt;docker images: 查看所有镜像。&lt;/li&gt;
&lt;li&gt;docker ps -a: 查看当前系统中存在的容器。-a表示无论是否在运行中，都会被查找到。&lt;/li&gt;
&lt;li&gt;docker start/stop name: 启动或停止容器。&lt;/li&gt;
&lt;li&gt;docker rm name: 删除容器。运行中的容器是无法直接删除的，需要先停止容器运行后才能将其删除。&lt;/li&gt;
&lt;li&gt;docker rmi name: 删除Image。&lt;/li&gt;
&lt;li&gt;docker logs -f -t name: 查看容器日志。-f表示用于监控容器的日志，功能类似于tail -f。-t用来添加时间戳。&lt;/li&gt;
&lt;li&gt;docker exec -it name /bin/bash: 在容器内运行进程。&lt;/li&gt;
&lt;li&gt;docker build -t weather:v1.0 ./: 构建一个镜像。&lt;/li&gt;
&lt;li&gt;docker run -d -p 80:8080 –name weather weather:v1.0: 运行镜像。&lt;/li&gt;
&lt;li&gt;docker tag weather:v1.0 fengbo4213/test:v1.0: 给镜像打标签。&lt;/li&gt;
&lt;li&gt;docker push fengbo4213/test:v1.0: 推送到DockerHub。&lt;/li&gt;
&lt;li&gt;docker cp weather:/app ./: 将未启动容器中的内容拷贝出来，方便查看。&lt;/li&gt;
&lt;li&gt;docker inspect name: 查看容器详细信息。
    
    </summary>
    
    
      <category term="其它" scheme="http://yoursite.com/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>HG255D刷OpenWRT</title>
    <link href="http://yoursite.com/2020/06/21/%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8BHG255D%E5%88%B7OpenWRT/"/>
    <id>http://yoursite.com/2020/06/21/路由器之HG255D刷OpenWRT/</id>
    <published>2020-06-21T10:16:28.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="路由器就是开发板-HG255D电信原版刷机实战整理-Ubuntu使用USB转TTL"><a href="#路由器就是开发板-HG255D电信原版刷机实战整理-Ubuntu使用USB转TTL" class="headerlink" title="路由器就是开发板 | HG255D电信原版刷机实战整理 | Ubuntu使用USB转TTL"></a><a href="https://blog.csdn.net/aggresss/category_6383458.html" target="_blank" rel="noopener">路由器就是开发板</a> | <a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=143721&amp;highlight=hg255d%20openwrt" target="_blank" rel="noopener">HG255D电信原版刷机实战整理</a> | <a href="http://blog.chinaunix.net/uid-23733005-id-204774.html" target="_blank" rel="noopener">Ubuntu使用USB转TTL</a></h3><a id="more"></a><h3 id="接TTL线"><a href="#接TTL线" class="headerlink" title="接TTL线"></a>接TTL线</h3><p>如下图接线：<br><img src="/img/华为HG255D电信原版无线路由器刷机.jpg"></p><h3 id="Ubuntu安装配置minicom"><a href="#Ubuntu安装配置minicom" class="headerlink" title="Ubuntu安装配置minicom"></a>Ubuntu安装配置minicom</h3><ol><li>安装：sudo apt-get install minicom</li><li>查看USB转串口接入状态：<ul><li>lsmod | grep usbserial</li><li>dmesg | grep ttyUSB0</li></ul></li><li>配置minicom<ol><li>输入命令：sudo minicom -s </li><li>选择“Serial port setup”，出现串口配置菜单</li><li>输入A，修改serial device，由/dev/tty0修改为/dev/ttyUSB0，波特率改为57600</li><li>选择 Save setup as dfl，接着选择Exit退出。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;路由器就是开发板-HG255D电信原版刷机实战整理-Ubuntu使用USB转TTL&quot;&gt;&lt;a href=&quot;#路由器就是开发板-HG255D电信原版刷机实战整理-Ubuntu使用USB转TTL&quot; class=&quot;headerlink&quot; title=&quot;路由器就是开发板 | HG255D电信原版刷机实战整理 | Ubuntu使用USB转TTL&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/aggresss/category_6383458.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;路由器就是开发板&lt;/a&gt; | &lt;a href=&quot;https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=143721&amp;amp;highlight=hg255d%20openwrt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HG255D电信原版刷机实战整理&lt;/a&gt; | &lt;a href=&quot;http://blog.chinaunix.net/uid-23733005-id-204774.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu使用USB转TTL&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>分布式原理</title>
    <link href="http://yoursite.com/2020/03/13/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/13/分布式之分布式原理/</id>
    <published>2020-03-13T12:59:16.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单机存储引擎"><a href="#单机存储引擎" class="headerlink" title="单机存储引擎"></a>单机存储引擎</h3><p>存储系统的基本功能包括:增、删、读、改,其中,读取操作又分为随机读取和顺序扫描。</p><ul><li>哈希存储引擎是哈希表的持久化实现,支持增、删、改,以及随机读取操作,但不支持顺序扫描,对应的存储系统为键值(Key-Value)存储系统。</li><li>B树(B-Tree)存储引擎是B树的持久化实现,不仅支持单条记录的增、删、读、改操作,还支持顺序扫描,对应的存储系统是关系数据库。</li><li>LSM树存储引擎通过将数据的修改增量保存在内存中，读取时需要合并磁盘中的历史数据和内存中的操作记录。支持增、删、改、随机读取以及顺序扫描。<a id="more"></a></li></ul><h3 id="分布式系统数据复制"><a href="#分布式系统数据复制" class="headerlink" title="分布式系统数据复制"></a>分布式系统数据复制</h3><p>客户端将数据写入主副本，主副本将操作日志同步到备副本，备副本回放操作日志，完成后通知主副本。</p><h2 id="分布式协议基础"><a href="#分布式协议基础" class="headerlink" title="分布式协议基础"></a>分布式协议基础</h2><ul><li>CAP理论：一个分布式系统不可能同时满足一致性(C:Consistency)、可用性(A:Availability)和分区容错性(P:Partition tolerance)这三个基本要求,最多只能同时满足其中的两项。<ul><li>一致性 (Consistency)：一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有读操作都不能读到这个数据。所有节点访问同一份最新的数据。</li><li>可用性 (Availability)：对数据更新具备高可用性，请求能够及时处理，不会一直等待，即使出现节点失效。</li><li>分区容错性 (Partition tolerance)：能容忍网络分区，在网络断开的情况下，被分隔的节点仍能正常对外提供服务。</li></ul></li><li>BASE理论：对CAP中一致性和可用性权衡的结果，其核心思想是即使无法做到强一致性(Strongconsistency),但每个应用都可以根据自身的业务特点,采用适当的方式来使系统达到最终一致性(Eventualconsistency)。<ul><li>基本可用：基本可用是指分布式系统在出现不可预知故障的时候,允许损失部分可用性。响应时间上的损失:正常情况下,一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果,但由于出现故障(比如系统部分机房发生断电或断网故障),查询结果的响应时间增加到了1~2秒；功能上的损失:正常情况下,在一个电子商务网站上进行购物,消费者儿乎能够顺利地完成每一笔订单,但是在一些节日大促购物高峰的时候,由于消费者的购物行为激增,为了保护购物系统的稳定性,部分消费者可能会被引导到一个降级页面。</li><li>弱状态也称为软状态,和硬状态相对,是指允许系统中的数据存在中间状态,并认为该中间状态的存在不会影响系统的整体可用性,即允许系统在不同节点的数据副本之间进行数据吟步的过程存在延时。</li><li>最终一致性强调的是系统中所有的数据副本,在经过一段时间的同步后,最终能够达到一个一致的状态。因此,最终一致性的本质是需要系统保证最终数据能够达到一致,而不需要实时保证系统数据的强一致性。</li></ul></li></ul><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><p>大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的,利用该协议能够非常方便地完成所有分布式事务参与者的协调,统一决定事务的提交或回漫,从而能够有效地保证分布式数据一致性。<br>阶段一:提交事务请求</p><ol><li>事务询问。协调者向所有的参与者发送事务内容,询问是否可以执行事务提交操作,并开始等待各参与者的响应。</li><li>执行事务。各参与者节点执行事务操作,并将Undo和Redo信息记人事务日志中。</li><li>各参与者向协调者反馈事务询问的响应。如果参与者成务执行了事务操作,那么就反馈给协调者Yes响应,表示事务可以执行;如果参与者没有成功执行事务,那么就反馈给协调者No响应,表示事务不可以执行。</li></ol><p>阶段二:假如协调者从所有的参与者获得的反馈都是Yes响应,那么就会执行事务提交。</p><ol><li>发送提交请求。协调者向所有参与者节点发出Commit请求。</li><li>事务提交。参与者接收到Commit请求后,会正式执行事务提交操作,并在完成提交之后释放在整个事务执行期间占用的事务资源。</li><li>反馈事务提交结果。参与者在完成事务提交之后,向协调者发送Ack消息。</li></ol><p>阶段二:假如任何一个参与者向协调者反馈了No响应,或者在等待超时之后,协调者尚无法接收到所有参与者的反馈响应,那么就会中断事务。</p><ol><li>发送回滚请求。协调者向所有参与者节点发出Rollback请求。</li><li>事务回滚。参与者接收到Rollback请求后,会利用其在阶段一中记录的Undo信息来执行事务回滚操作,并在完成回滚之后释放在整个事务执行期间占用的资源。</li><li>反馈事务回滚结果。参与者在完成事务回滚之后,向协调者发送Ack消息。</li><li>中断事务。协调者接收到所有参与者反馈的Ack消息后,完成事务中断。</li></ol><h3 id="两阶段提交的问题"><a href="#两阶段提交的问题" class="headerlink" title="两阶段提交的问题"></a>两阶段提交的问题</h3><ol><li>同步阻塞:二阶段提交协议存在的最朋显也是最大的一分布式系统的性能。在二阶段提交的执行过于阻塞状态,也就是说,各个参与者在等待具他任何操作。个问题就是同步阻塞,这会极大地限制程中,所有参与该事务操作的逻辑都处其他参与者响应的过程中,将无法进行其他任何操作。</li><li>单点问题:协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题,那么整个二阶段提交流程将无法运转,更为严重的是,如果协调者是在阶段二中出现问题的话,那么其它参与者将会一直处于锁定事务资源的状态中,而无法继续完成事务操作。</li><li>数据不一致:在二阶段提交协议的阶段二,即执行事务提交的时候,当协调者向所有的参与者发送Commit请求之后,发生了局部网络异常或者是协调者在尚未发送完Commit请求之前自身发生了崩澎,导致最终只有部分参与者收到了Commit请求。于是,这部分收到了Commit请求的参与者就会进行事务的提交,而其他没有收到Commit请求的参与者则无法进行事务提交,于是整个分布式系统便出现了数据不一致性现象。</li><li>太过保守:如果在协调者指示参与者进行事务提交询问的过程中,参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话,这时协调者只能依靠其自身的超时机制来判断是否需要中断事务,这样的策略显得比较保守。换句话说,二阶段提交协议没有设计较为完善的容错机制,任意一个节点的失败都会导致整个事务的失败。</li></ol><h2 id="Paxos协议"><a href="#Paxos协议" class="headerlink" title="Paxos协议"></a>Paxos协议</h2><h2 id="Raft协议"><a href="#Raft协议" class="headerlink" title="Raft协议"></a>Raft协议</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>主从备份主要有两种方法：<ol><li>状态转移(State Transfer)：主服务器将完整的状态内容都传输给备份服务器。即将主节点的当前所有数据进行镜像备份，适合冷备份。</li><li>备份状态机(Replicated State Machine)：将需要备份的服务器视为一个确定性状态机——主备以相同的状态启动，以相同顺序导入相同的输入，最后它们就会进入相同的状态、给出相同的输出。</li></ol></li><li>Write-Ahead Logging：对数据文件的修改必须发生在这些修改已经记录到日志之后，也就是先写日志落盘然后写数据。这样就不需要每次提交事务的时候把数据块刷回磁盘，因为出现奔溃的情况下可以用日志来恢复数据。</li></ul><h2 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a><a href="https://www.cnblogs.com/rgcLOVEyaya/p/RGC_LOVE_YAYA_1003days.html" target="_blank" rel="noopener">Redis实现分布式锁</a></h2><h2 id="ZooKeeper的典型应用场景"><a href="#ZooKeeper的典型应用场景" class="headerlink" title="ZooKeeper的典型应用场景"></a>ZooKeeper的典型应用场景</h2><h3 id="ZooKeeper简介"><a href="#ZooKeeper简介" class="headerlink" title="ZooKeeper简介"></a>ZooKeeper简介</h3><p>ZooKeeper是一个高可用的分布式数据管理与协调框架。基于对ZAB算法的实现,该框架能够很好地保证分布式环境中数据的一致性。也正是基于这样的特性，使得ZooKeeper成为了解决分布式一致性问题的利器。</p><h3 id="数据的发布-订阅"><a href="#数据的发布-订阅" class="headerlink" title="数据的发布/订阅"></a>数据的发布/订阅</h3><ul><li>即所谓的配置中心,顾名思义就是发布者将数据发布到ZooKeeper的一个或一系列节点上,供订阅者进行数据订阅,进而达到动态获取数据的目的,实现配置信息的集中式管理和数据的动态更新。</li><li>客户端向服务端注册自己需要关注的节点,一旦该节点的数据发生变更,那么服务端就会向相应的客户端发送Wateher事件通知,客户端接收到这个消息通知之后,需要主动到服务端获取最新的数据。</li></ul><h3 id="命名服务-Name-Service"><a href="#命名服务-Name-Service" class="headerlink" title="命名服务(Name Service)"></a>命名服务(Name Service)</h3><p>在分布式系统中，被命名的实体通常可以是集群中的机器、提供的服务地址或远程对象等一一这些我们都可以统称它们为名字(Name),其中较为常见的就是一些分布式服务框架(如RPC、RMI)中的服务地址列表,通过使用命名服务,客户端应用能够根据指定名字来获取资源的实体、服务地址和提供者的信息等。<br>命名服务器的作用主要有两个，一个是收集提供请求处理的服务器的地址信息;另外一个是提供这些地址信息给请求发起方。当然,名称服务只是起到了一个地址交换的作用,在发起请求的机器上,需要根据从名称服务得到的地址迹行负载均衡的工作。</p><h3 id="集群管理与负载均衡"><a href="#集群管理与负载均衡" class="headerlink" title="集群管理与负载均衡"></a>集群管理与负载均衡</h3><p>ZooKeeper具有以下两大特性。</p><ol><li>客户端如果对ZooKeeper的一个数据节点注册Wateher监听,那么当该数据节点的内容或是其子节点列表发生变更时,ZooKeeper服务器就会向订阅的客户端发送变更通知。</li><li>对在ZooKeeper上创建的临时节点,一旦客户端与服务器之间的会话失效,那么该临时节点也就被自动清除。<br>利用ZooKeeper的这两大特性,就可以实现集群机器存活性监控系统。监控系统在/cuserServers节点上注册一个Watcher监听,那么但凡进行动态添加机器的操作,就会在/clusterServers节点下创建一个临时节点:/cliisterServers/[HostName]。这样一来,监控系统就能够实时检测到机器的变动情况。<br>同时集群上的服务器可以在监听到Watcher事件时，去ZooKeeper拉取集群上所有服务器的基础信息，然后以这些信息为基础进行软负载均衡。</li></ol><h3 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h3><ul><li>在分布式系统中,Master往往用来协调集群中其他系统单元,具有对分布式系统状态变更的决定权。例如,在一些读写分离的应用场景中,客户端的写请求往往是由Master来处理的;而在另一些场景中,Master则常常负责处理一些复杂的逻辑,些将处理结果同步给集群中其他系统单元。</li><li>ZooKeeper能够很好地保证在分布式高并发情况下节点的创建一定能够保证全局唯一性,即ZooKeeper将会保证客户端无法重复创建一个已经存在的数据节点。也就是说,如果同时有多个客户端请求创建同一个节点,那么最终一定只有一个客户端请求能够创建成功。利用这个特性,就能很容易地在分布式环境中进行Master选举了。</li><li>即所有客户端都去向ZooKeeper请求创建一个临时节点,例如/maser_efecrion/2013-09-20/binding。在这个过程中,只有一个客户端能够成功创建这个节点,那么这个客户端所在的机器就成为了Master。同时,其他没有在ZooKeeper上成功创建节点的客户端,都会在节点/maser_elecrion/2013-09-20上注册一个子节点变更的Watcher,用于监控当前的Master机器是否存活,一旦发现当前的Master挂了,那么其余的客户端将会重新进行Master选举。</li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><ol><li>获取锁：在需要获取排他锁时,所有的客户端都会试图通过调用create()接口,在/exclusive_lock节点下创建临时子节点/exclusive_lock/lock。ZooKeeper会保证在所有的客户端中,最终只有一个客户端能够创建成功,那么就可以认为该客户端获取了锁。同时,所有没有获取到锁的客户端谐需要到/excliusive_lock节点上注册一个子节点变更的Watcher监听,以便实时监听到lock节点的变更情况。</li><li>释放锁：/exelsive_lock/lock是一个临时节点,因此在以下两种情况下,都有可能释放锁。<ul><li>当前获取锁的客户端机器发生宕机,那么ZooKeeper上的这个临时节点就会被移除。</li><li>正常执行完业务逻辑后,客户端就会主动将自已创建的临时节点删除。<br>无论在什么情况下移除了lock节点,ZooKeeper都会通知所有在/exclusive_lock节点上注册了子节点变更Wateher监听的客户端。这些客户端在接收到通知后,再次重新发起分布式锁获取,即重复获取锁过程。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单机存储引擎&quot;&gt;&lt;a href=&quot;#单机存储引擎&quot; class=&quot;headerlink&quot; title=&quot;单机存储引擎&quot;&gt;&lt;/a&gt;单机存储引擎&lt;/h3&gt;&lt;p&gt;存储系统的基本功能包括:增、删、读、改,其中,读取操作又分为随机读取和顺序扫描。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希存储引擎是哈希表的持久化实现,支持增、删、改,以及随机读取操作,但不支持顺序扫描,对应的存储系统为键值(Key-Value)存储系统。&lt;/li&gt;
&lt;li&gt;B树(B-Tree)存储引擎是B树的持久化实现,不仅支持单条记录的增、删、读、改操作,还支持顺序扫描,对应的存储系统是关系数据库。&lt;/li&gt;
&lt;li&gt;LSM树存储引擎通过将数据的修改增量保存在内存中，读取时需要合并磁盘中的历史数据和内存中的操作记录。支持增、删、改、随机读取以及顺序扫描。
    
    </summary>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>网络管理和优化</title>
    <link href="http://yoursite.com/2020/02/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/02/08/树莓派之网络管理和优化/</id>
    <published>2020-02-08T03:59:16.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><ol><li><p>使用nmap进行网络扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sP 192.168.0.*</span><br></pre></td></tr></table></figure></li><li><p>查看流量是从哪些端口发送出去的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iftop -P</span><br></pre></td></tr></table></figure></li></ol><p>TX：发送流量<br>RX：接收流量<br>TOTAL：总流量<br>Cumm：运行iftop到目前时间的总流量<br>peak：流量峰值<br>rates：分别表示过去 2s 10s 40s 的平均流量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;网络管理&quot;&gt;&lt;a href=&quot;#网络管理&quot; class=&quot;headerlink&quot; title=&quot;网络管理&quot;&gt;&lt;/a&gt;网络管理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用nmap进行网络扫描&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>利用VNC远程控制树莓派</title>
    <link href="http://yoursite.com/2020/01/29/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E5%88%A9%E7%94%A8VNC%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <id>http://yoursite.com/2020/01/29/树莓派之利用VNC远程控制树莓派/</id>
    <published>2020-01-29T10:44:51.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置树莓派启动方式"><a href="#设置树莓派启动方式" class="headerlink" title="设置树莓派启动方式"></a>设置树莓派启动方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="OpenVPN"><a href="#OpenVPN" class="headerlink" title="OpenVPN"></a>OpenVPN</h2><h3 id="OpenVPN客户端和服务器端安装-OpenVPN配置详解"><a href="#OpenVPN客户端和服务器端安装-OpenVPN配置详解" class="headerlink" title="OpenVPN客户端和服务器端安装 | OpenVPN配置详解"></a><a href="https://www.ilanni.com/?p=9837" target="_blank" rel="noopener">OpenVPN客户端和服务器端安装</a> | <a href="https://www.ilanni.com/?p=9847" target="_blank" rel="noopener">OpenVPN配置详解</a></h3><h2 id="VPC软件"><a href="#VPC软件" class="headerlink" title="VPC软件"></a>VPC软件</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol><li>服务端安装并运行VNC<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tightvncserver</span><br><span class="line">tightvncserver</span><br></pre></td></tr></table></figure></li></ol><p>然后设置密码，输入控制密码，选择性输入查看密码，查看密码只能用来查看桌面，而控制密码才能对桌面进行操作。每个用户可以启动多个VNCSERVER远程桌面，它们用ip加端口号：ip:1、ip:2、ip:3 来标识、区分，使用同一端口会使另外登录的用户自动退出。</p><ol start="2"><li>停止VNC窗口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vncserver -kill:1</span><br><span class="line"># 修改密码</span><br><span class="line">vncpasswd</span><br><span class="line"># 重启服务</span><br><span class="line">service vncserver restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ol><li>Windows10可以直接安装TightVNC Viewer。</li><li>安卓手机可以安装RealVNC Viewer。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设置树莓派启动方式&quot;&gt;&lt;a href=&quot;#设置树莓派启动方式&quot; class=&quot;headerlink&quot; title=&quot;设置树莓派启动方式&quot;&gt;&lt;/a&gt;设置树莓派启动方式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo raspi-config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>树莓派实现NAS家庭服务器</title>
    <link href="http://yoursite.com/2020/01/28/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E5%AE%9E%E7%8E%B0NAS%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2020/01/28/树莓派之实现NAS家庭服务器/</id>
    <published>2020-01-28T07:25:35.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="挂载移动硬盘"><a href="#挂载移动硬盘" class="headerlink" title="挂载移动硬盘"></a>挂载移动硬盘</h3><ol><li><p>插上硬盘，查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure></li><li><p>挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sda5 /home/pi/samba</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="安装DLNA实现流媒体服务器"><a href="#安装DLNA实现流媒体服务器" class="headerlink" title="安装DLNA实现流媒体服务器"></a>安装DLNA实现流媒体服务器</h3><ol><li><p>安装minidlna。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install minidlna</span><br></pre></td></tr></table></figure></li><li><p>设置/etc/minidlna.conf文件，在文件尾部添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件</span><br><span class="line">media_dir=A,/home/pi/samba/DLNA/Music</span><br><span class="line">media_dir=P,/home/pi/samba/DLNA/Picture</span><br><span class="line">media_dir=V,/home/pi/samba/DLNA/Video</span><br><span class="line"># 配置minidlna的数库数据的存放目录</span><br><span class="line">db_dir=/home/pi/samba/DLNA/db</span><br><span class="line"># 配置日志目录</span><br><span class="line">log_dir=/home/pi/samba/DLNA/log</span><br></pre></td></tr></table></figure></li><li><p>在相应位置建立以上文件夹，并设置好权限为。</p></li><li><p>重启minidlna。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service minidlna restart</span><br></pre></td></tr></table></figure></li><li><p>电脑上可以使用VLC播放器，View &gt; Playlist[CTRL + L] &gt; Local Network。</p></li><li>手机可以使用MoliPlayer或者VLC。</li></ol><h3 id="安装aria2实现下载机功能"><a href="#安装aria2实现下载机功能" class="headerlink" title="安装aria2实现下载机功能"></a>安装aria2实现下载机功能</h3><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aria2</span><br><span class="line">sudo mkdir /etc/aria2 </span><br><span class="line">sudo touch /etc/aria2/aria2.session </span><br><span class="line">sudo chmod 777 /etc/aria2/aria2.session </span><br><span class="line">sudo chgrp -R pi /home/pi/samba/DLNA/Video</span><br><span class="line">sudo chown -R pi /home/pi/samba/DLNA/Video</span><br><span class="line">sudo vi /etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure></li><li><p><a href="http://www.senra.me/aria2-conf-file-parameters-translation-and-explanation/" target="_blank" rel="noopener">aria2.conf文件配置</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">dir=/home/pi/samba/DLNA/Video</span><br><span class="line">disable-ipv6=true</span><br><span class="line"></span><br><span class="line">#打开rpc的目的是为了给web管理端用</span><br><span class="line">enable-rpc=true</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line">#断点续传</span><br><span class="line">continue=true</span><br><span class="line">input-file=/etc/aria2/aria2.session</span><br><span class="line">save-session=/etc/aria2/aria2.session</span><br><span class="line"></span><br><span class="line">#最大同时下载任务数</span><br><span class="line">max-concurrent-downloads=20</span><br><span class="line">save-session-interval=120</span><br><span class="line"></span><br><span class="line"># Http/FTP 相关</span><br><span class="line">connect-timeout=120</span><br><span class="line">#lowest-speed-limit=10K</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server=10</span><br><span class="line">#max-file-not-found=2</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size=10M</span><br><span class="line"></span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split=10</span><br><span class="line">check-certificate=false</span><br><span class="line">#http-no-cache=true</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aria2c --conf-path=/etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure></li></ol><p>如果没有提示错误，按ctrl+c停止运行命令，转为后台运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br></pre></td></tr></table></figure></p><ol start="4"><li>参数使用<br>使用 aria2 下载文件，只需在命令后附加地址即可。注意：命令是aria2c。比如我们下载ubuntu如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c http://www.mirror.tw/pub/ubuntu/releases/jaunty/ubuntu-9.04-desktop-i386.iso</span><br></pre></td></tr></table></figure></li></ol><p>分段下载利用aria2的分段下载功能可以加快文件的下载速度，对于下载大文件时特别有用，为了使用aria2的分段下载功能，你需要在命令中指定s选项，使用c选项可以断点续传文件。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c -c -s10 -x10 http://www.mirror.tw/pub/ubuntu/releases/jaunty/ubuntu-9.04-desktop-i386.iso</span><br></pre></td></tr></table></figure></p><p>下载torrent文件你也可以使用aria2下载BitTorrent文件。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aria2c -o gutsy.torrent http://cdimage.ubuntu.com/daily-live/current/gutsy-desktop-i386.iso.torrent</span><br></pre></td></tr></table></figure></p><ol start="5"><li>aria2安装Web界面<ol><li><a href="https://github.com/binux/yaaw" target="_blank" rel="noopener">下载yaaw</a></li><li>将下载下来的静态文件放到HTTP服务器的工作目录中。</li><li>使用浏览器访问该服务器并点击右上角的扳手按钮配置aria2。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;挂载移动硬盘&quot;&gt;&lt;a href=&quot;#挂载移动硬盘&quot; class=&quot;headerlink&quot; title=&quot;挂载移动硬盘&quot;&gt;&lt;/a&gt;挂载移动硬盘&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;插上硬盘，查看状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo fdisk -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;挂载&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mount /dev/sda5 /home/pi/samba&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>树莓派系统和相关软件安装</title>
    <link href="http://yoursite.com/2020/01/27/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/01/27/树莓派之系统安装/</id>
    <published>2020-01-27T13:05:51.000Z</published>
    <updated>2021-07-03T01:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方系统安装"><a href="#官方系统安装" class="headerlink" title="官方系统安装"></a><a href="https://post.smzdm.com/p/738951/" target="_blank" rel="noopener">官方系统安装</a></h3><ol><li>安装SDFormatter4，选好要用的TF卡盘符，然后点击格式化。</li><li>安装Win32DiskImager，点击文件夹图标，选择准备好的img文件，然后点击Write按钮。</li><li>进度条走完之后会弹出两个框，一个是询问是否格式化磁盘，选取消。<a id="more"></a></li></ol><h3 id="将树莓派用做无线路由器"><a href="#将树莓派用做无线路由器" class="headerlink" title="将树莓派用做无线路由器"></a><a href="https://www.cnblogs.com/jins-note/p/9513594.html" target="_blank" rel="noopener">将树莓派用做无线路由器</a></h3><ol><li><p>安装hostapd。并修改/etc/default/hostapd和/etc/hostapd/hostapd.conf。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 使用如下命令</span><br><span class="line">sudo apt remove --purge hostapd </span><br><span class="line">sudo apt update </span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install hostapd</span><br><span class="line"></span><br><span class="line"># 在/etc/default/hostapd中添加</span><br><span class="line">DAEMON_CONF=&quot;/etc/hostapd/hostapd.conf&quot;</span><br><span class="line"></span><br><span class="line"># 在hostapd.conf中添加</span><br><span class="line"># 把无线网卡wlan0作为接入点</span><br><span class="line">interface=wlan0</span><br><span class="line"># 使用nl80211驱动</span><br><span class="line">#driver=nl80211</span><br><span class="line"># a 5G g 2.4G</span><br><span class="line">hw_mode=g</span><br><span class="line"># 无线网卡选用11信道，如果hw_mode为a可以选择165</span><br><span class="line">channel=11</span><br><span class="line">ieee80211n=1</span><br><span class="line">ieee80211ac=1</span><br><span class="line">wmm_enabled=1</span><br><span class="line"></span><br><span class="line"># WPA2 only</span><br><span class="line">wpa=2</span><br><span class="line"># 1=wpa 2=wep 3=both</span><br><span class="line">auth_algs=3</span><br><span class="line"># 认证方式为WPA-PSK加密方式为CCMP</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">wpa_pairwise=CCMP</span><br><span class="line">rsn_pairwise=CCMP</span><br><span class="line"></span><br><span class="line"># Wifi名称</span><br><span class="line">ssid=wifi123</span><br><span class="line"># Wifi密码</span><br><span class="line">wpa_passphrase=feng4213</span><br></pre></td></tr></table></figure></li><li><p>安装dnsmasq。并修改/etc/dnsmasq.conf。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在dnsmasq.conf中添加</span><br><span class="line">interface=wlan0</span><br><span class="line">dhcp-range=192.168.202.10,192.168.202.150,255.255.255.0,24h</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/rc.local文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 在exit 0之前添加</span><br><span class="line">sudo ifconfig wlan0 down</span><br><span class="line">sudo ifconfig wlan0 192.168.202.1 netmask 255.255.255.0 up</span><br><span class="line"># 关闭无线网络的电源管理</span><br><span class="line">sudo iw dev wlan0 set power_save off</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT</span><br><span class="line">sudo service hostapd restart</span><br><span class="line">sudo service dnsmasq restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="利用ssh反向代理及autossh实现内网穿透"><a href="#利用ssh反向代理及autossh实现内网穿透" class="headerlink" title="利用ssh反向代理及autossh实现内网穿透"></a>利用ssh反向代理及autossh实现内网穿透</h3><ol><li>内网和外网机器安装autossh。</li><li><p>内网机器配置免密登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub root@外网地址</span><br></pre></td></tr></table></figure></li><li><p>在内网机器上启动autossh。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># -f：是指autossh后台运行，不会阻塞shell继续向下执行；</span><br><span class="line"># -N：是指建立的ssh连接只用于转发数据，不解析命令； </span><br><span class="line"># -R：是指建立反向隧道，一般我们ssh某个服务器是正向隧道； </span><br><span class="line"># 8888：是公网服务器上的代理端口；</span><br><span class="line"># localhost:22：是指代理到本机时需要访问的ip和端口，即内网机器A的ip地址+端口；</span><br><span class="line"># -p 40022：是外网机器B的ssh端口；</span><br><span class="line">autossh -fNR 8888:localhost:22 -p 22 root@外网地址</span><br></pre></td></tr></table></figure></li><li><p>在外网上查看8888端口是否打开。</p></li><li>在外网主机上连接内网主机。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 8888 localhost -l pi</span><br></pre></td></tr></table></figure></li></ol><h3 id="设置autossh自动启动"><a href="#设置autossh自动启动" class="headerlink" title="设置autossh自动启动"></a>设置autossh自动启动</h3><ol><li><p>新建/etc/systemd/system/remote-autossh.service文件。并添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=AutoSSH</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=pi</span><br><span class="line">ExecStart=/usr/bin/autossh -fNR 8888:localhost:22 -p 22 root@118.31.167.239</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -TERM $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=no</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>使用systemctl daemon-reload命令刷新systemctl服务。</p></li><li>使用systemctl start remote-autossh立即启动服务，或者systemctl enable remote-autossh启动服务并设置为开机启动。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;官方系统安装&quot;&gt;&lt;a href=&quot;#官方系统安装&quot; class=&quot;headerlink&quot; title=&quot;官方系统安装&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://post.smzdm.com/p/738951/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方系统安装&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;安装SDFormatter4，选好要用的TF卡盘符，然后点击格式化。&lt;/li&gt;
&lt;li&gt;安装Win32DiskImager，点击文件夹图标，选择准备好的img文件，然后点击Write按钮。&lt;/li&gt;
&lt;li&gt;进度条走完之后会弹出两个框，一个是询问是否格式化磁盘，选取消。
    
    </summary>
    
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
</feed>
